// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cables

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CablesServiceClient is the client API for CablesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CablesServiceClient interface {
	Hook(ctx context.Context, opts ...grpc.CallOption) (CablesService_HookClient, error)
}

type cablesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCablesServiceClient(cc grpc.ClientConnInterface) CablesServiceClient {
	return &cablesServiceClient{cc}
}

func (c *cablesServiceClient) Hook(ctx context.Context, opts ...grpc.CallOption) (CablesService_HookClient, error) {
	stream, err := c.cc.NewStream(ctx, &CablesService_ServiceDesc.Streams[0], "/cables.CablesService/Hook", opts...)
	if err != nil {
		return nil, err
	}
	x := &cablesServiceHookClient{stream}
	return x, nil
}

type CablesService_HookClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type cablesServiceHookClient struct {
	grpc.ClientStream
}

func (x *cablesServiceHookClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cablesServiceHookClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CablesServiceServer is the server API for CablesService service.
// All implementations must embed UnimplementedCablesServiceServer
// for forward compatibility
type CablesServiceServer interface {
	Hook(CablesService_HookServer) error
	mustEmbedUnimplementedCablesServiceServer()
}

// UnimplementedCablesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCablesServiceServer struct {
}

func (UnimplementedCablesServiceServer) Hook(CablesService_HookServer) error {
	return status.Errorf(codes.Unimplemented, "method Hook not implemented")
}
func (UnimplementedCablesServiceServer) mustEmbedUnimplementedCablesServiceServer() {}

// UnsafeCablesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CablesServiceServer will
// result in compilation errors.
type UnsafeCablesServiceServer interface {
	mustEmbedUnimplementedCablesServiceServer()
}

func RegisterCablesServiceServer(s grpc.ServiceRegistrar, srv CablesServiceServer) {
	s.RegisterService(&CablesService_ServiceDesc, srv)
}

func _CablesService_Hook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CablesServiceServer).Hook(&cablesServiceHookServer{stream})
}

type CablesService_HookServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type cablesServiceHookServer struct {
	grpc.ServerStream
}

func (x *cablesServiceHookServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cablesServiceHookServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CablesService_ServiceDesc is the grpc.ServiceDesc for CablesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CablesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cables.CablesService",
	HandlerType: (*CablesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hook",
			Handler:       _CablesService_Hook_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cables.proto",
}
